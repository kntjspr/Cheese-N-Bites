{"ast":null,"code":"// do not edit .js files directly - edit src/index.jst\n\nvar fastDeepEqual = function equal(a, b) {\n  if (a === b) return true;\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a !== a && b !== b;\n};\n\n/**\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at.\r\n *\r\n *      Http://www.apache.org/licenses/LICENSE-2.0.\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DEFAULT_ID = \"__googleMapsScriptId\";\n/**\r\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\r\n * dynamically using\r\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\r\n * It works by dynamically creating and appending a script node to the the\r\n * document head and wrapping the callback function so as to return a promise.\r\n *\r\n * ```\r\n * const loader = new Loader({\r\n *   apiKey: \"\",\r\n *   version: \"weekly\",\r\n *   libraries: [\"places\"]\r\n * });\r\n *\r\n * loader.load().then((google) => {\r\n *   const map = new google.maps.Map(...)\r\n * })\r\n * ```\r\n */\nclass Loader {\n  /**\r\n   * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\r\n   * using this library, instead the defaults are set by the Google Maps\r\n   * JavaScript API server.\r\n   *\r\n   * ```\r\n   * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\r\n   * ```\r\n   */\n  constructor(_ref) {\n    let {\n      apiKey,\n      channel,\n      client,\n      id = DEFAULT_ID,\n      libraries = [],\n      language,\n      region,\n      version,\n      mapIds,\n      nonce,\n      retries = 3,\n      url = \"https://maps.googleapis.com/maps/api/js\"\n    } = _ref;\n    this.CALLBACK = \"__googleMapsCallback\";\n    this.callbacks = [];\n    this.done = false;\n    this.loading = false;\n    this.errors = [];\n    this.version = version;\n    this.apiKey = apiKey;\n    this.channel = channel;\n    this.client = client;\n    this.id = id || DEFAULT_ID; // Do not allow empty string\n    this.libraries = libraries;\n    this.language = language;\n    this.region = region;\n    this.mapIds = mapIds;\n    this.nonce = nonce;\n    this.retries = retries;\n    this.url = url;\n    if (Loader.instance) {\n      if (!fastDeepEqual(this.options, Loader.instance.options)) {\n        throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(Loader.instance.options)}`);\n      }\n      return Loader.instance;\n    }\n    Loader.instance = this;\n  }\n  get options() {\n    return {\n      version: this.version,\n      apiKey: this.apiKey,\n      channel: this.channel,\n      client: this.client,\n      id: this.id,\n      libraries: this.libraries,\n      language: this.language,\n      region: this.region,\n      mapIds: this.mapIds,\n      nonce: this.nonce,\n      url: this.url\n    };\n  }\n  get failed() {\n    return this.done && !this.loading && this.errors.length >= this.retries + 1;\n  }\n  /**\r\n   * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\r\n   *\r\n   * @ignore\r\n   */\n  createUrl() {\n    let url = this.url;\n    url += `?callback=${this.CALLBACK}`;\n    if (this.apiKey) {\n      url += `&key=${this.apiKey}`;\n    }\n    if (this.channel) {\n      url += `&channel=${this.channel}`;\n    }\n    if (this.client) {\n      url += `&client=${this.client}`;\n    }\n    if (this.libraries.length > 0) {\n      url += `&libraries=${this.libraries.join(\",\")}`;\n    }\n    if (this.language) {\n      url += `&language=${this.language}`;\n    }\n    if (this.region) {\n      url += `&region=${this.region}`;\n    }\n    if (this.version) {\n      url += `&v=${this.version}`;\n    }\n    if (this.mapIds) {\n      url += `&map_ids=${this.mapIds.join(\",\")}`;\n    }\n    return url;\n  }\n  /**\r\n   * Load the Google Maps JavaScript API script and return a Promise.\r\n   */\n  load() {\n    return this.loadPromise();\n  }\n  /**\r\n   * Load the Google Maps JavaScript API script and return a Promise.\r\n   *\r\n   * @ignore\r\n   */\n  loadPromise() {\n    return new Promise((resolve, reject) => {\n      this.loadCallback(err => {\n        if (!err) {\n          resolve(window.google);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n  /**\r\n   * Load the Google Maps JavaScript API script with a callback.\r\n   */\n  loadCallback(fn) {\n    this.callbacks.push(fn);\n    this.execute();\n  }\n  /**\r\n   * Set the script on document.\r\n   */\n  setScript() {\n    if (document.getElementById(this.id)) {\n      // TODO wrap onerror callback for cases where the script was loaded elsewhere\n      this.callback();\n      return;\n    }\n    const url = this.createUrl();\n    const script = document.createElement(\"script\");\n    script.id = this.id;\n    script.type = \"text/javascript\";\n    script.src = url;\n    script.onerror = this.loadErrorCallback.bind(this);\n    script.defer = true;\n    script.async = true;\n    if (this.nonce) {\n      script.nonce = this.nonce;\n    }\n    document.head.appendChild(script);\n  }\n  deleteScript() {\n    const script = document.getElementById(this.id);\n    if (script) {\n      script.remove();\n    }\n  }\n  /**\r\n   * Reset the loader state.\r\n   */\n  reset() {\n    this.deleteScript();\n    this.done = false;\n    this.loading = false;\n    this.errors = [];\n    this.onerrorEvent = null;\n  }\n  resetIfRetryingFailed() {\n    if (this.failed) {\n      this.reset();\n    }\n  }\n  loadErrorCallback(e) {\n    this.errors.push(e);\n    if (this.errors.length <= this.retries) {\n      const delay = this.errors.length * Math.pow(2, this.errors.length);\n      console.log(`Failed to load Google Maps script, retrying in ${delay} ms.`);\n      setTimeout(() => {\n        this.deleteScript();\n        this.setScript();\n      }, delay);\n    } else {\n      this.onerrorEvent = e;\n      this.callback();\n    }\n  }\n  setCallback() {\n    window.__googleMapsCallback = this.callback.bind(this);\n  }\n  callback() {\n    this.done = true;\n    this.loading = false;\n    this.callbacks.forEach(cb => {\n      cb(this.onerrorEvent);\n    });\n    this.callbacks = [];\n  }\n  execute() {\n    this.resetIfRetryingFailed();\n    if (this.done) {\n      this.callback();\n    } else {\n      // short circuit and warn if google.maps is already loaded\n      if (window.google && window.google.maps && window.google.maps.version) {\n        console.warn(\"Google Maps already loaded outside @googlemaps/js-api-loader.\" + \"This may result in undesirable behavior as options and script parameters may not match.\");\n        this.callback();\n        return;\n      }\n      if (this.loading) ;else {\n        this.loading = true;\n        this.setCallback();\n        this.setScript();\n      }\n    }\n  }\n}\nexport { DEFAULT_ID, Loader };","map":{"version":3,"mappings":"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","names":["equal","a","b","constructor","length","i","keys","Array","isArray","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","key","DEFAULT_ID","Loader","apiKey","channel","client","id","libraries","language","region","version","mapIds","nonce","retries","url","instance","isEqual","options","Error","JSON","stringify","failed","done","loading","errors","createUrl","CALLBACK","join","load","loadPromise","Promise","resolve","reject","loadCallback","err","window","google","fn","callbacks","push","execute","setScript","document","getElementById","callback","script","createElement","type","src","onerror","loadErrorCallback","bind","defer","async","head","appendChild","deleteScript","remove","reset","onerrorEvent","resetIfRetryingFailed","e","delay","Math","console","log","setTimeout","setCallback","__googleMapsCallback","forEach","cb","maps","warn"],"sources":["../node_modules/fast-deep-equal/index.js","../src/index.ts"],"sourcesContent":["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport isEqual from \"fast-deep-equal\";\n\n/**\n * @ignore\n */\ndeclare global {\n  interface Window {\n    __googleMapsCallback: (e: Event) => void;\n  }\n}\n\nexport const DEFAULT_ID = \"__googleMapsScriptId\";\n\ntype Libraries = (\n  | \"drawing\"\n  | \"geometry\"\n  | \"localContext\"\n  | \"places\"\n  | \"visualization\"\n)[];\n\n/**\n * The Google Maps JavaScript API\n * [documentation](https://developers.google.com/maps/documentation/javascript/tutorial)\n * is the authoritative source for [[LoaderOptions]].\n/**\n * Loader options\n */\nexport interface LoaderOptions {\n  /**\n   * See https://developers.google.com/maps/documentation/javascript/get-api-key.\n   */\n  apiKey: string;\n  /**\n   * @deprecated See https://developers.google.com/maps/premium/overview.\n   */\n  channel?: string;\n  /**\n   * @deprecated See https://developers.google.com/maps/premium/overview, use `apiKey` instead.\n   */\n  client?: string;\n  /**\n   * In your application you can specify release channels or version numbers:\n   *\n   * The weekly version is specified with `version=weekly`. This version is\n   * updated once per week, and is the most current.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly'});\n   * ```\n   *\n   * The quarterly version is specified with `version=quarterly`. This version\n   * is updated once per quarter, and is the most predictable.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'quarterly'});\n   * ```\n   *\n   * The version number is specified with `version=n.nn`. You can choose\n   * `version=3.40`, `version=3.39`, or `version=3.38`. Version numbers are\n   * updated once per quarter.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: '3.40'});\n   * ```\n   *\n   * If you do not explicitly specify a version, you will receive the\n   * weekly version by default.\n   */\n  version?: string;\n  /**\n   * The id of the script tag. Before adding a new script, the Loader will check for an existing one.\n   */\n  id?: string;\n  /**\n   * When loading the Maps JavaScript API via the URL you may optionally load\n   * additional libraries through use of the libraries URL parameter. Libraries\n   * are modules of code that provide additional functionality to the main Maps\n   * JavaScript API but are not loaded unless you specifically request them.\n   *\n   * ```\n   * const loader = Loader({\n   *  apiKey,\n   *  libraries: ['drawing', 'geometry', 'places', 'visualization'],\n   * });\n   * ```\n   *\n   * Set the [list of libraries](https://developers.google.com/maps/documentation/javascript/libraries) for more options.\n   */\n  libraries?: Libraries;\n  /**\n   * By default, the Maps JavaScript API uses the user's preferred language\n   * setting as specified in the browser, when displaying textual information\n   * such as the names for controls, copyright notices, driving directions and\n   * labels on maps. In most cases, it's preferable to respect the browser\n   * setting. However, if you want the Maps JavaScript API to ignore the\n   * browser's language setting, you can force it to display information in a\n   * particular language when loading the Maps JavaScript API code.\n   *\n   * For example, the following example localizes the language to Japan:\n   *\n   * ```\n   * const loader = Loader({apiKey, language: 'ja', region: 'JP'});\n   * ```\n   *\n   * See the [list of supported\n   * languages](https://developers.google.com/maps/faq#languagesupport). Note\n   * that new languages are added often, so this list may not be exhaustive.\n   *\n   */\n  language?: string;\n  /**\n   * When you load the Maps JavaScript API from maps.googleapis.com it applies a\n   * default bias for application behavior towards the United States. If you\n   * want to alter your application to serve different map tiles or bias the\n   * application (such as biasing geocoding results towards the region), you can\n   * override this default behavior by adding a region parameter when loading\n   * the Maps JavaScript API code.\n   *\n   * The region parameter accepts Unicode region subtag identifiers which\n   * (generally) have a one-to-one mapping to country code Top-Level Domains\n   * (ccTLDs). Most Unicode region identifiers are identical to ISO 3166-1\n   * codes, with some notable exceptions. For example, Great Britain's ccTLD is\n   * \"uk\" (corresponding to the domain .co.uk) while its region identifier is\n   * \"GB.\"\n   *\n   * For example, the following example localizes the map to the United Kingdom:\n   *\n   * ```\n   * const loader = Loader({apiKey, region: 'GB'});\n   * ```\n   */\n  region?: string;\n  /**\n   * (Beta) You can add multiple Map IDs to your map using the map_ids paramenter in\n   * your bootstrap request.\n   */\n  mapIds?: string[];\n  /**\n   * Use a custom url and path to load the Google Maps API script.\n   */\n  url?: string;\n  /**\n   * Use a cryptographic nonce attribute.\n   */\n  nonce?: string;\n  /**\n   * The number of script load retries.\n   */\n  retries?: number;\n}\n\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then((google) => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */\nexport class Loader {\n  /**\n   * See [[LoaderOptions.version]]\n   */\n  version: string;\n  /**\n   * See [[LoaderOptions.apiKey]]\n   */\n  apiKey: string;\n  /**\n   * See [[LoaderOptions.channel]]\n   */\n  channel: string;\n  /**\n   * See [[LoaderOptions.client]]\n   */\n  client: string;\n  /**\n   * See [[LoaderOptions.id]]\n   */\n  id: string;\n  /**\n   * See [[LoaderOptions.libraries]]\n   */\n  libraries: Libraries;\n  /**\n   * See [[LoaderOptions.language]]\n   */\n  language: string;\n\n  /**\n   * See [[LoaderOptions.region]]\n   */\n  region: string;\n\n  /**\n   * See [[LoaderOptions.mapIds]]\n   */\n  mapIds: string[];\n\n  /**\n   * See [[LoaderOptions.nonce]]\n   */\n  nonce: string | null;\n\n  /**\n   * See [[LoaderOptions.retries]]\n   */\n  retries: number;\n\n  /**\n   * See [[LoaderOptions.url]]\n   */\n  url: string;\n\n  private CALLBACK = \"__googleMapsCallback\";\n  private callbacks: ((e: Event) => void)[] = [];\n  private done = false;\n  private loading = false;\n  private onerrorEvent: Event;\n  private static instance: Loader;\n  private errors: ErrorEvent[] = [];\n\n  /**\n   * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n   * using this library, instead the defaults are set by the Google Maps\n   * JavaScript API server.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n   * ```\n   */\n  constructor({\n    apiKey,\n    channel,\n    client,\n    id = DEFAULT_ID,\n    libraries = [],\n    language,\n    region,\n    version,\n    mapIds,\n    nonce,\n    retries = 3,\n    url = \"https://maps.googleapis.com/maps/api/js\",\n  }: LoaderOptions) {\n    this.version = version;\n    this.apiKey = apiKey;\n    this.channel = channel;\n    this.client = client;\n    this.id = id || DEFAULT_ID; // Do not allow empty string\n    this.libraries = libraries;\n    this.language = language;\n    this.region = region;\n    this.mapIds = mapIds;\n    this.nonce = nonce;\n    this.retries = retries;\n    this.url = url;\n\n    if (Loader.instance) {\n      if (!isEqual(this.options, Loader.instance.options)) {\n        throw new Error(\n          `Loader must not be called again with different options. ${JSON.stringify(\n            this.options\n          )} !== ${JSON.stringify(Loader.instance.options)}`\n        );\n      }\n\n      return Loader.instance;\n    }\n\n    Loader.instance = this;\n  }\n\n  get options(): LoaderOptions {\n    return {\n      version: this.version,\n      apiKey: this.apiKey,\n      channel: this.channel,\n      client: this.client,\n      id: this.id,\n      libraries: this.libraries,\n      language: this.language,\n      region: this.region,\n      mapIds: this.mapIds,\n      nonce: this.nonce,\n      url: this.url,\n    };\n  }\n\n  private get failed(): boolean {\n    return this.done && !this.loading && this.errors.length >= this.retries + 1;\n  }\n\n  /**\n   * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n   *\n   * @ignore\n   */\n  createUrl(): string {\n    let url = this.url;\n\n    url += `?callback=${this.CALLBACK}`;\n\n    if (this.apiKey) {\n      url += `&key=${this.apiKey}`;\n    }\n\n    if (this.channel) {\n      url += `&channel=${this.channel}`;\n    }\n\n    if (this.client) {\n      url += `&client=${this.client}`;\n    }\n\n    if (this.libraries.length > 0) {\n      url += `&libraries=${this.libraries.join(\",\")}`;\n    }\n\n    if (this.language) {\n      url += `&language=${this.language}`;\n    }\n\n    if (this.region) {\n      url += `&region=${this.region}`;\n    }\n\n    if (this.version) {\n      url += `&v=${this.version}`;\n    }\n\n    if (this.mapIds) {\n      url += `&map_ids=${this.mapIds.join(\",\")}`;\n    }\n\n    return url;\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   */\n  load(): Promise<typeof google> {\n    return this.loadPromise();\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   *\n   * @ignore\n   */\n  loadPromise(): Promise<typeof google> {\n    return new Promise((resolve, reject) => {\n      this.loadCallback((err: Event) => {\n        if (!err) {\n          resolve(window.google);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script with a callback.\n   */\n  loadCallback(fn: (e: Event) => void): void {\n    this.callbacks.push(fn);\n    this.execute();\n  }\n\n  /**\n   * Set the script on document.\n   */\n  private setScript(): void {\n    if (document.getElementById(this.id)) {\n      // TODO wrap onerror callback for cases where the script was loaded elsewhere\n      this.callback();\n      return;\n    }\n\n    const url = this.createUrl();\n    const script = document.createElement(\"script\");\n    script.id = this.id;\n    script.type = \"text/javascript\";\n    script.src = url;\n    script.onerror = this.loadErrorCallback.bind(this);\n    script.defer = true;\n    script.async = true;\n\n    if (this.nonce) {\n      script.nonce = this.nonce;\n    }\n\n    document.head.appendChild(script);\n  }\n\n  deleteScript(): void {\n    const script = document.getElementById(this.id);\n    if (script) {\n      script.remove();\n    }\n  }\n\n  /**\n   * Reset the loader state.\n   */\n  private reset(): void {\n    this.deleteScript();\n    this.done = false;\n    this.loading = false;\n    this.errors = [];\n    this.onerrorEvent = null;\n  }\n\n  private resetIfRetryingFailed(): void {\n    if (this.failed) {\n      this.reset();\n    }\n  }\n\n  private loadErrorCallback(e: ErrorEvent): void {\n    this.errors.push(e);\n\n    if (this.errors.length <= this.retries) {\n      const delay = this.errors.length * 2 ** this.errors.length;\n\n      console.log(\n        `Failed to load Google Maps script, retrying in ${delay} ms.`\n      );\n\n      setTimeout(() => {\n        this.deleteScript();\n        this.setScript();\n      }, delay);\n    } else {\n      this.onerrorEvent = e;\n      this.callback();\n    }\n  }\n\n  private setCallback(): void {\n    window.__googleMapsCallback = this.callback.bind(this);\n  }\n\n  private callback(): void {\n    this.done = true;\n    this.loading = false;\n\n    this.callbacks.forEach((cb) => {\n      cb(this.onerrorEvent);\n    });\n\n    this.callbacks = [];\n  }\n\n  private execute(): void {\n    this.resetIfRetryingFailed();\n\n    if (this.done) {\n      this.callback();\n    } else {\n      // short circuit and warn if google.maps is already loaded\n      if (window.google && window.google.maps && window.google.maps.version) {\n        console.warn(\n          \"Google Maps already loaded outside @googlemaps/js-api-loader.\" +\n            \"This may result in undesirable behavior as options and script parameters may not match.\"\n        );\n        this.callback();\n        return;\n      }\n\n      if (this.loading) {\n        // do nothing but wait\n      } else {\n        this.loading = true;\n        this.setCallback();\n        this.setScript();\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}